1. Create .Net API project






2. Project SetUp
 - Install dependencies
           . efCore, efcore.sqlserver, efcore.tools

 - Register Dependencies
           . Configure connectionString
		   . Create Student Entity/Model
		   . Create DBContext and add the student model
           . Register ConnectionString and DBContext in Program class.                                    


 - Apply Migration
           . add-migration "initial_migration"
		   . update-database



3. API Creation (Repository Pattern)
  
 - Create API
          . Create interface and repository
		  . Declare create method with its DTO and response type (bool)
		  . Repository inherets interface
		  . Inject DBContext through the constructor of repository
		  . Do Concrete implementation of the create method
		  . Register Interface mapping to Repository in the program.cs class
		  
		  .Create controller
		  .inject interface
		  .Do an httpPost API calling the create method on interface
		  
		  
 - Get API
          . Declare the fetching method in the Interface(IStudent)
		  . Implement the real code in the studentRepository.
		  . Expose the method in the controller.
		  
		  
		  
- Update API
          . Declare the fetching method in the Interface(IStudent)
		  . Implement the real code in the studentRepository.
		  . Expose the method in the controller.
		  
		  
		  
- Delete API
          . Declare the fetching method in the Interface(IStudent)
		  . Implement the real code in the studentRepository.
		  . Expose the method in the controller.
		  
		  
		  
		  
		  
		  
		  
		   
		  Best Practices
		  1. Try Catch, 
		  2. Global Error handler,
		  3. Automapper
		  4. Statuscode
		  5. Nlog
		  6. Uniform Response Object
		  7. Restful Best practices
		  8. JWT Authentication
		  9. consuming external API
		  
		  
		  
		  
		  
		  UNIFORM RESPONSE
		  
		  1  Create a uniform response class.
		  -  create a constructor for success case and another for failure cases
		  -  return uniform response type passing the appropriete constructor parameters.
		  
		  
		  
		  
		  GLOBAL ERROR HANDLER MIDDLEWARE
		  
		  - create a method that takes the httpcontext and exeption, then returns a uniform response for that error
		  - create an exemption middleware with try-catch, call the method above in the catch block.